Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000 
ii. Business table = 10,000
iii. Category table = 10,000
iv. Checkin table = 10,000 
v. elite_years table = 10,000
vi. friend table = 10,000
vii. hours table = 10,000
viii. photo table = 10,000
ix. review table = 10,000
x. tip table = 10,000
xi. user table = 10,000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000
ii. Hours = 1,562
iii. Category = 2,643
iv. Attribute = 1,115
v. Review = 10,000
vi. Checkin = 493
vii. Photo = 10,000
viii. Tip = 537 (user_id)
ix. User = 10,000
x. Friend = 11
xi. Elite_years = 2,780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no.
	
	
	SQL code used to arrive at answer:
	SELECT 
		COUNT(*) - COUNT(id),
		COUNT(*) - COUNT(name),
		COUNT(*) - COUNT(review_count),
		COUNT(*) - COUNT(yelping_since),
		COUNT(*) - COUNT(useful),
		COUNT(*) - COUNT(funny),
		COUNT(*) - COUNT(cool),
		COUNT(*) - COUNT(fans),
		COUNT(*) - COUNT(average_stars),
		COUNT(*) - COUNT(compliment_more),
		COUNT(*) - COUNT(compliment_profile),
		COUNT(*) - COUNT(compliment_cute),
		COUNT(*) - COUNT(compliment_list),
		COUNT(*) - COUNT(compliment_note),
		COUNT(*) - COUNT(compliment_plain),
		COUNT(*) - COUNT(compliment_cool),
		COUNT(*) - COUNT(compliment_funny),
		COUNT(*) - COUNT(compliment_writer),
		COUNT(*) - COUNT(compliment_photos)
	FROM user;
		
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT city, sum(review_count)
FROM business
GROUP BY city
ORDER BY sum(review_count) DESC;
	
	
	Copy and Paste the Result Below:
	
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars AS [Star Rating], COUNT(stars) AS [Count]
FROM business
WHERE city = 'Avon'
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS [Star Rating], COUNT(stars) AS [Count]
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Copy and Paste the Result Below:
		
+--------+-------------------+
| name   | sum(review_count) |
+--------+-------------------+
| Gerald |              2000 |
| Sara   |              1629 |
| Yuri   |              1339 |
+--------+-------------------+


8. Does posing more reviews correlate with more fans? No

	Please explain your findings and interpretation of the results:
	
	While having very little reviews will almost always mean no fans,
	The rate of growth of fans does not correlate with the number of reviews one posts.
	A more apt correlation can be "posting no reviews correlates heavily with having no fans".
	
	I pulled the following 3 queries to arrive at this answer:
	
SELECT name, review_count, fans
FROM user
ORDER BY fans ASC, review_count DESC;

Result: 

+---------------+--------------+------+
| name          | review_count | fans |
+---------------+--------------+------+
| G             |          359 |    0 |
| gric          |          177 |    0 |
| Uwe           |          122 |    0 |
| Sally         |          108 |    0 |
| Marlene       |          106 |    0 |
| Jason         |          105 |    0 |
| Anand         |          104 |    0 |
| Inconspicuous |          103 |    0 |
| Ckoka         |          103 |    0 |
| Tara          |           96 |    0 |
| hotb          |           94 |    0 |
| Aileen        |           93 |    0 |
| Mama          |           93 |    0 |
| Afroza        |           91 |    0 |
| Irene         |           89 |    0 |
| William       |           85 |    0 |
| Melissa       |           85 |    0 |
| Chip          |           85 |    0 |
| Colin         |           82 |    0 |
| Dallison      |           82 |    0 |
| Alison        |           82 |    0 |
| Jeff          |           82 |    0 |
| Judith        |           81 |    0 |
| Dan           |           80 |    0 |
| Peter         |           77 |    0 |
+---------------+--------------+------+

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC, fans ASC;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+

SELECT name, review_count, fans
FROM user
ORDER BY fans DESC;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love

	
	SQL code used to arrive at answer:
	SELECT 
		(SELECT COUNT(text)
		FROM review
		WHERE Lower(text) LIKE '%love%') as love,
		(SELECT COUNT(text)
		FROM review
		WHERE Lower(text) LIKE '%hate%') as hate;

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name, fans
FROM user
ORDER BY fans DESC
limit 10;
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	City = 'Toronto' 
	Category = 'Food'

i. Do the two groups you chose to analyze have a different distribution of hours?
	Yes, there is a clear difference in hours among the two groups of ratings. Stores rated 2 - 3 stars were open on average for 6 hours
	less than stores rated 4 - 5 stars.
	
+-----------+------------------+------------+
| Stars     | Total Businesses | Hours      |
+-----------+------------------+------------+
| 2-3 Stars |                1 | 8:00-22:00 |
| 4-5 Stars |                2 | 1:00-21:00 |
+-----------+------------------+------------+

ii. Do the two groups you chose to analyze have a different number of reviews?
    Yes, the average store with 4 - 5 stars has (on average) 136 reviews while for 2 - 3 stars the number is 70, almost half.
+-----------+------------------+------------------------+
| Stars     | Total Businesses |  Avg Number of Reviews |
+-----------+------------------+------------------------+
| 2-3 Stars |                1 |                     70 |
| 4-5 Stars |                2 |                    136 |
+-----------+------------------+------------------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	No infrence can be made, partly becuase the sample size is small. All three businesses are in different neighborhoods.
	This is summarized clearly in the chart below.
	
+-------+-----------------+
| stars | neighborhood    |
+-------+-----------------+
|   2.5 | Roncesvalles    |
|   3.5 |                 |
|   4.0 | Wallace Emerson |
|   4.5 | High Park       |
+-------+-----------------+
SQL code used for analysis:

For Part(i):

SELECT CASE 
    WHEN stars >= 4 THEN '4-5 Stars'
    WHEN stars BETWEEN 2 AND 4 THEN '2-3 Stars'
    ELSE 'low rated' END AS 'Stars',
    COUNT(DISTINCT B.id) AS 'Total Businesses',
    substr(H.hours,-10) AS 'Hours'
FROM (business B INNER JOIN hours H ON B.id = H.business_id) 
INNER JOIN category C ON B.id = C.business_id
WHERE city = 'Toronto' AND C.category = 'Food'
GROUP BY stars;

For Part(ii):
SELECT CASE 
    WHEN stars >= 4 THEN '4-5 Stars'
    WHEN stars BETWEEN 2 AND 4 THEN '2-3 Stars'
    ELSE 'low rated' END AS 'Stars',
    COUNT(DISTINCT B.id) AS 'Total Businesses',
    SUM(review_count)/COUNT(DISTINCT B.id) AS ' Avg Number of Reviews'
FROM (business B INNER JOIN hours H ON B.id = H.business_id) 
INNER JOIN category C ON B.id = C.business_id
WHERE city = 'Toronto' AND C.category = 'Food'
GROUP BY stars;

For Part(iii):

SELECT B.Stars, B.neighborhood
FROM business B INNER JOIN category C ON B.id = C.business_id
WHERE city = 'Toronto' AND C.category = 'Food'
GROUP BY stars;
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the 
ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Almost 7 times as many businesses are open than closed (61 closed vs 446 open).
         
         
ii. Difference 2: The average rating is higher for businesses that are open. Note the average number of reviews are almost the same,
just the actaul ratings are higher for businesses which are still open (which makes complete sense).
         
   
SQL code used for analysis:

SELECT
    is_open,
    COUNT(DISTINCT B.id) [Number of Businesses],
    COUNT(DISTINCT(R.id)) [Number of Reviews],
    avg(R.stars) [Average Rating]
From Business B JOIN Review R ON B.id = R.Business_id
GROUP BY is_open;
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the 
Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering 
businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, 
predicting the number of fans a user will have, and so on. These are just a few examples to get you started, 
so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         What categories are the most controversial?
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
		I determined a rating as positive if it was over 2.5 and negative if it was below 2.5. I then looked at the categories
		with over 10 review counts and where atleast one positive and negative rating was given. After summing the positive ratings
		and the negative ratings I ordered the categories by the ratio of Postive ratings over Negative ratings to determine the most
		controversial categories. These were Home Cleaning and Hospitals and are listed below in order. Furthermore Shopping was shown
		to have very consistant postive ratings and not be a controversial category at all.
		
                  
iii. Output of your finished dataset:

+------------------------+------+-----+
| category               |    P |   N |
+------------------------+------+-----+
| Home Cleaning          |  4.0 | 1.5 |
| Hospitals              |  1.5 | 0.5 |
| Burgers                |  7.0 | 2.0 |
| Sushi Bars             |  4.5 | 0.5 |
| Mexican                |  7.5 | 0.5 |
| Restaurants            | 72.5 | 4.5 |
| Beauty & Spas          | 19.0 | 1.0 |
| Nightlife              | 20.5 | 1.0 |
| American (Traditional) | 15.0 | 0.5 |
| Bars                   | 17.5 | 0.5 |
| Shopping               | 45.5 | 1.0 |
+------------------------+------+-----+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT C.category, sum(max(B.stars - 2.5, 0)) AS P, sum(max(2.5 - B.stars, 0)) AS N
FROM category C INNER JOIN Business B ON B.id = C.Business_ID
GROUP BY category
HAVING P*N <> 0 AND B.review_count > 10
ORDER BY P/N ASC;